use crate::ast::Expr;
use crate::lexer::{LexicalError, Tok};

grammar;

pub DefModule: Expr = {
  "defmodule" <m:modname> "do" <es:Expr*> "end" => { 
    Expr::DefModule{name: m, exprs: es} 
  }
};

Expr: Expr = {
  "def" <f:funcname> "do" <es:Expr*> "end" => { Expr::DefFunc{name: f, exprs: es}},
  "use" <m:modname> => { Expr::Use{modname: m}},
  "true" => Expr::True
}

extern {
  type Location = usize;
  type Error = LexicalError;

  enum Tok {
    "def" => Tok::Def,
    "defmodule" => Tok::DefModule,
    "defp" => Tok::Defp,
    "do" => Tok::Do,
    "end" => Tok::End,
    "true" => Tok::True,
    "use" => Tok::Use,
    modname => Tok::ModName { name: <String> },
    funcname => Tok::FuncName { name: <String> }
  }
}
